import { Separator } from "@/components/ui/separator"
import { Image } from "@/shared/atoms/Image"
import { CashFlowTablePdf } from "../../organisms/pdf/CashFlowTablePdf"
import { BalanceSheetTablePdf } from "../../organisms/pdf/BalanceSheetTablePdf"
import { IncomeStatementTablePdf } from "../../organisms/pdf/IncomeStatementTablePdf"
import cyphrLogo from "@/assets/logo-cyphr.jpg"

type FinancialProjectionPdfProps = {
  itemsRef: React.MutableRefObject<
    Partial<Record<string, HTMLDivElement | null>>
  >
}

enum RefKeys {
  disclaimerNote = "disclaimerNote",
  cashFlowStatement = "cashFlowStatement",
  balanceSheet = "balanceSheet",
  incomeStatement = "incomeStatement"
}

const DisclaimerNote: React.FC = () => {
  return (
    <div className="flex flex-col gap-3">
      <Image
        src={cyphrLogo}
        placeholderClassName="bg-slate-400 rounded"
        alt="Institution text logo"
        height={90}
        width={360}
      />

      <p className="text-2xl font-normal mt-[1280px]">Financial Forecast</p>
      <Separator />
      <div className="font-light text-xl text-justify">
        <p className="font-semibold">Disclaimer:</p>
        <p>
          The projections and financial statements provided in this application
          are generated based on user inputs, data retrieved from banking
          sources, and other third-party data providers. Please be advised that
          these projections are forward-looking and subject to uncertainties.
          Actual results may differ materially from the projections provided,
          and no guarantee of future performance is implied.
        </p>
        <p>
          All information is provided "as is," with no guarantees of
          completeness, accuracy, or timeliness. We are not responsible for any
          errors or omissions in the information or for the results obtained
          from its use. The financial projections are estimates and should be
          used as planning tools rather than definitive representations of your
          financial future.
        </p>
        <p>
          Our platform incorporates third-party data, and while we strive to
          ensure its accuracy, we do not assume any responsibility for
          inaccuracies or delays from external data providers. Users are
          encouraged to consult a financial professional before making decisions
          based on the projections generated by this application.
        </p>
        <p>
          We take the privacy of your data seriously. Please refer to our
          Privacy Policy for details on how your information is collected and
          used. By using this application, you acknowledge and agree to these
          terms.
        </p>
      </div>
    </div>
  )
}

const FinancialForecastFooter: React.FC<{
  totalPage: number
  currentPage: number
}> = ({ totalPage, currentPage }) => {
  return (
    <div className="flex items-center justify-between border-t-2 px-4 py-2 footer">
      <p>Financial Forecast</p>
      <p>
        Page {currentPage} of {totalPage}
      </p>
    </div>
  )
}

export const FinancialProjectionPdf: React.FC<FinancialProjectionPdfProps> = ({
  itemsRef
}) => {
  const provideRef = (key: string) => (e: HTMLDivElement) => {
    if (itemsRef.current) itemsRef.current[key] = e
  }

  const splitData = (data: number[], splitSize: number) => {
    const result = []
    for (let i = 0; i < data.length; i += splitSize) {
      result.push(data.slice(i, i + splitSize))
    }
    return result
  }

  const fakeCashFlowData = splitData(
    Array.from({ length: 12 }, (_, index) => 2024 + index),
    3
  )

  const fakeBalanceSheetData = splitData(
    Array.from({ length: 12 }, (_, index) => 2024 + index),
    3
  )
  const fakeIncomeStatementData = splitData(
    Array.from({ length: 12 }, (_, index) => 2024 + index),
    3
  )

  return (
    <div className="flex flex-col">
      <div
        className="flex justify-center"
        ref={provideRef(RefKeys.disclaimerNote)}
      >
        <DisclaimerNote />
      </div>
      {/* Cash Flow Section */}
      {fakeCashFlowData.map((data, index) => (
        <div
          key={index}
          className="flex flex-col gap-3"
          ref={provideRef(`${RefKeys.cashFlowStatement}-${index}`)}
        >
          {index === 0 && (
            <p className="text-4xl font-semibold">Cash Flow Statement</p>
          )}
          {index !== 0 && <p>...continued from previous page</p>}
          <CashFlowTablePdf data={data} />
          <div className="hidden">
            <FinancialForecastFooter
              totalPage={fakeCashFlowData.length}
              currentPage={index + 1}
            />
          </div>
        </div>
      ))}
      {/* Balance Sheet Section */}
      {fakeBalanceSheetData.map((data, index) => (
        <div
          key={index}
          className="flex flex-col gap-3"
          ref={provideRef(`${RefKeys.balanceSheet}-${index}`)}
        >
          {index === 0 && (
            <p className="text-4xl font-semibold">Balance Sheet</p>
          )}
          {index !== 0 && <p>...continued from previous page</p>}
          <BalanceSheetTablePdf data={data} />
          <div className="hidden">
            <FinancialForecastFooter
              totalPage={fakeBalanceSheetData.length}
              currentPage={index + 1}
            />
          </div>
        </div>
      ))}
      {/* Income Statement Section */}
      {fakeIncomeStatementData.map((data, index) => (
        <div
          key={index}
          className="flex flex-col gap-3"
          ref={provideRef(`${RefKeys.incomeStatement}-${index}`)}
        >
          {index === 0 && (
            <p className="text-4xl font-semibold">Income Statement</p>
          )}
          {index !== 0 && <p>...continued from previous page</p>}
          <IncomeStatementTablePdf data={data} />
          <div className="hidden">
            <FinancialForecastFooter
              totalPage={fakeIncomeStatementData.length}
              currentPage={index + 1}
            />
          </div>
        </div>
      ))}
    </div>
  )
}
